export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"主页"},["/README.md"]],
  ["v-242354a7","/AI/aigc.html",{"y":"a","t":"AIgc"},[":md"]],
  ["v-6c9fb0e9","/AI/prompt%20from%20xxx.html",{"y":"a","t":"prompt from xxx GPT"},["/AI/prompt from xxx.html","/AI/prompt from xxx.md",":md"]],
  ["v-b238d67a","/CsCommon/%E6%8F%90%E9%AB%98%E6%90%9C%E7%B4%A2%E8%83%BD%E5%8A%9B.html",{"y":"a","t":"提高搜索能力"},["/CsCommon/提高搜索能力.html","/CsCommon/提高搜索能力.md",":md"]],
  ["v-551bb614","/backend/",{"e":"<h1> 这是一个标题</h1>\n","y":"a","t":"这是一个标题"},["/backend/README.md"]],
  ["v-4e65ec78","/demo/disable.html",{"c":["使用指南"],"g":["禁用"],"e":"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n","y":"a","t":"布局与功能禁用","i":"gears","O":3},[":md"]],
  ["v-c151bf32","/demo/encrypt.html",{"c":["使用指南"],"g":["文章加密"],"n":true,"y":"a","t":"密码加密的文章","i":"lock"},[":md"]],
  ["v-32ea93e6","/demo/icon.html",{"e":"<h2> 图标的使用</h2>\n<p>这文档写的一点都不清楚，让我想了很久，翻遍配置也找不到图片的引入</p>\n<p>原来是在主题中内置了 fontawesome 的图标库，所以可以直接使用图标库的图标<br>\n<a href=\"https://fontawesome.com/search?q=js&amp;o=r\" target=\"_blank\" rel=\"noopener noreferrer\">fontawesome</a></p>\n<p>在官网找到想用的图标的名字，然后复制 i 连接里面的名字就可以了</p>\n<figure><figcaption></figcaption></figure>","y":"a","t":"关于vuepress-theme-hope 中图标的使用"},[":md"]],
  ["v-438ffe52","/demo/markdown.html",{"c":["使用指南"],"g":["Markdown"],"e":"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n","y":"a","t":"Markdown 展示","i":"fab fa-markdown","O":2},[":md"]],
  ["v-6e19edb7","/demo/page.html",{"a":"Ms.Hope","d":1577836800000,"l":"2020年1月1日","c":["使用指南"],"g":["页面配置","使用指南"],"u":true,"v":"/assets/images/cover1.jpg","e":"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n","y":"a","t":"页面配置","i":"file","O":1},[":md"]],
  ["v-1473bf53","/demo/",{"c":["使用指南"],"e":"<h2> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/demo/markdown.html\" target=\"blank\">Markdown 展示</a></p>\n</li>\n<li>\n<p><a href=\"/demo/page.html\" target=\"blank\">页面展示</a></p>\n</li>\n<li>\n<p><a href=\"/demo/disable.html\" target=\"blank\">禁用展示</a></p>\n</li>\n<li>\n<p><a href=\"/demo/encrypt.html\" target=\"blank\">加密展示</a></p>\n</li>\n</ul>","y":"a","t":"主要功能与配置演示","i":"laptop-code"},["/demo/README.md"]],
  ["v-06198984","/frontend/",{"e":"<h2> 目录</h2>\n","y":"a","t":"前端"},["/frontend/README.md"]],
  ["v-5ed8e27d","/frontend/%E8%A7%A3%E6%9E%90html.html",{"e":"<h2> 想解析 html 的起因</h2>\n<p>我的 navigation 有一个功能需求就是输入网站 url 就可以直接得到网站的 icon 和名称(描述)，但是这样的话需要直接根据 url 去爬取<br>\n获取到的 data 是一个 html，所以需要解析</p>\n<h2> 两天后想到了绝妙的方法</h2>\n<p>from fish 因为我这个需求单纯的只是解析书签，然后如果这点小事都要传到后端再传回来的话会很费资源，所以最好就是在前端搞定了以后，将确认要的网站丢回去。所以有一个很妙的方法，众所周知，只要拿到了文件，然后将它加到一个<code>&lt;div&gt;&lt;/div&gt; </code>浏览器就自己会帮你解析成 html，然后就可以使用 dom 元素了(node 里达咩)<br>\n综上，代码端上来罢</p>","y":"a","t":"解析 html"},["/frontend/解析html.html","/frontend/解析html.md",":md"]],
  ["v-4fec7d1c","/frontend/%E9%80%9A%E9%85%8D%E7%AC%A6.html",{"e":"<h2> 通配符</h2>\n<p>通配符是文本值中代替未知字符的特殊字符，可方便使用类似但不相同的数据查找多个项目。 通配符也有助于获得基于特定模式匹配的数据。 例如，寻找帕克街上名叫 John 的所有人。</p>\n<h3> 常用通配符</h3>\n<table>\n<thead>\n<tr>\n<th><strong>字符</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>匹配任意字符数。 您可以在字符串中使用星号 (<strong>*</strong>)。</td>\n<td>“<strong>wh*</strong>”将找到 what、white 和 why，但找不到 awhile 或 watch。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>在特定位置中匹配单个字母。</td>\n<td>“<strong>b?ll</strong>&nbsp;”可以找到 ball、bell 和 bill。</td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>匹配方括号中的字符。</td>\n<td>“<strong>b[ae]ll</strong>”将找到 ball 和 bell，但找不到 bill。</td>\n</tr>\n<tr>\n<td>!</td>\n<td>在方括号中排除字符。</td>\n<td>“<strong>b[!ae]ll</strong>”将找到 bill 和 bull，但找不到 ball 或 bell。<br><br>“<strong>Like “[!a]*”</strong>”将找到不以字母 a 开头的所有项目。</td>\n</tr>\n<tr>\n<td>-</td>\n<td>匹配一个范围内的字符。 记住以升序指定字符（A 到 Z，而不是 Z 到 A）。</td>\n<td>“<strong>b[a-c]d</strong>”将找到 bad、bbd 和 bcd。</td>\n</tr>\n<tr>\n<td>#</td>\n<td>匹配任意单个数字字符。</td>\n<td>“<strong>1#3</strong>”将找到 103、113 和 123。</td>\n</tr>\n</tbody>\n</table>","y":"a","t":""},["/frontend/通配符.html","/frontend/通配符.md",":md"]],
  ["v-57d4b301","/linux/linux%E5%9F%BA%E7%A1%80.html",{"e":"<p><a href=\"https://zhuanlan.zhihu.com/p/74123215\" target=\"_blank\" rel=\"noopener noreferrer\">入门指南</a></p>\n<p>查看 ip 地址</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">ip</span> address\n<span class=\"token function\">ifconfig</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"linux 基础"},["/linux/linux基础.html","/linux/linux基础.md",":md"]],
  ["v-6a1c553d","/linux/Ubuntu%E9%85%8D%E7%BD%AEssh.html",{"e":"<h2> 配置 ssh</h2>\n<p>在 linux 第一节课丢大脸了。。tabby 一直连不上，排查了半天发现都没问题，ip 地址没错，能 ping 上，然后 ssh 能连，然后密码也没错<br>\n结果最后是用户名写错了。。本来的是 root，然后我一直没改，鬼知道我是怎么想的。。<br>\n</p>\n<p>好扯回正题，应该如何在 Ubuntu 上配置 ssh 呢</p>\n<h3> 安装 ssh</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> openssh-server\nsshd\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Ubuntu 配置 ssh"},["/linux/Ubuntu配置ssh.html","/linux/Ubuntu配置ssh.md",":md"]],
  ["v-27a94f3c","/linux/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEUbuntu.html",{"e":"<h2> 镜像下载</h2>\n<p><a href=\"https://zhuanlan.zhihu.com/p/150502513\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/150502513</a><br>\n下载的版本最好为 LST 版本，比如说 20.04</p>\n<h2> 下载后在 VMware 中安装配置就好</h2>\n<h2> su: Authentication failure 的解决方案</h2>\n<p><a href=\"https://blog.csdn.net/weixin_44065125/article/details/108592612\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/weixin_44065125/article/details/108592612</a></p>","y":"a","t":"安装配置Ubuntu"},["/linux/安装配置Ubuntu.html","/linux/安装配置Ubuntu.md",":md"]],
  ["v-b5868240","/UiDesign/ui%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%8A%80%E5%B7%A7.html",{"d":1697587200000,"l":"2023年10月18日","e":"<h3> 因为 ui 这东西做笔记很麻烦，所以可能很多东西自己熟练就好，记一些好贴图的笔记</h3>\n<h3> UI 界面优化的 35 个小技巧</h3>\n<p><a href=\"%5BUI%E7%95%8C%E9%9D%A2%E4%BC%98%E5%8C%96%E7%9A%8435%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7%E3%80%90%E7%BA%AF%E5%B9%B2%E8%B4%A7%E3%80%91_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1pP4y1R7cM/)\">哔哩哔哩</a></p>","y":"a","t":"UI 的一些设计技巧"},["/UiDesign/ui的一些设计技巧.html","/UiDesign/ui的一些设计技巧.md",":md"]],
  ["v-04df8823","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E8%90%8C%E6%96%B0%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E2%80%9C%E6%AD%A3%E7%A1%AE%E2%80%9D%E7%9A%84%E5%85%A5%E9%97%A8.html",{"y":"a","t":"作为一个萌新应该如何“正确”的入门"},["/计算机基础/作为一个萌新应该如何“正确”的入门.html","/计算机基础/作为一个萌新应该如何“正确”的入门.md",":md"]],
  ["v-f93c877c","/backend/python/autopy.html",{"e":"<h2> 起因</h2>\n<p>写py大作业的时候发现手势控制鼠标老鼻子卡，想康康有没有更丝滑的，然后就找到了这哥们<br>\n<a href=\"https://blog.csdn.net/dgvv4/article/details/122268203\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/dgvv4/article/details/122268203</a><br>\nok直接cv，然后这哥们用了autopy，那就安装被<br>\n好，问题来了，又是说我缺少rustc 又是说我缺少一个什么wheel的<br>\n简单来说就是，这玩意是用rust写的，需要rust环境才能运行，而且看了<a href=\"https://github.com/autopilot-rs/autopy\" target=\"_blank\" rel=\"noopener noreferrer\">官网</a>，</p>","y":"a","t":""},[":md"]],
  ["v-3600cfe1","/backend/java/springboot.html",{"e":"<h2> 前提思想，理解java项目中的几种层</h2>\n<h3> 实体层对应到数据库里的实体类来理解</h3>\n<h3> dao层对应到数据库里的表来理解</h3>\n<h3> service层对应到业务逻辑来理解</h3>\n<h3> controller层，直接与前端交互，为前端提供接口</h3>\n<h3> mapper层，是dao层的实现，是mybatis的一种实现方式，在mapper层里使用sql语句</h3>\n<h2> mybatis+mysql</h2>\n<h2> 使用 mybatisplus</h2>\n<h3> 在 controller 中</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MyList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ToDoList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// controller 写的是操作方法</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ToDoListController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 引入mapper</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ToDoList</span> toDoList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todo\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyList</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getTodoList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyList</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> toDoList<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todo\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addTodoList</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">MyList</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> toDoList<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"插入成功\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"插入失败\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todo/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">deleteTodoList</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> toDoList<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"删除失败\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todo/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">updateTodoList</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">MyList</span> updatedList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        updatedList<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> toDoList<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>updatedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"更新成功\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"更新失败\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},[":md"]],
  ["v-513cdeb4","/backend/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%9C%89%E5%85%B3%E6%8A%A5%E9%94%99.html",{"e":"<h2> 导入表时报错1366 - Incorrect string value: '\\xF0\\x9F\\x90\\x8E' for column xxx'</h2>\n<p>一般这种问题就是字符集的设置问题，只需要将字符集修改为utf8mb4即可<br>\n</p>\n","y":"a","t":"","s":"数据库的有关报错"},["/backend/数据库/数据库的有关报错.html","/backend/数据库/数据库的有关报错.md",":md"]],
  ["v-54b77ade","/backend/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83.html",{"e":"<h2> 数据库对象命名规范</h2>\n<h3> 数据库对象</h3>\n<p>数据库对象是数据库的组成部分，常见的有以下几种：表（Table ）、索引（Index）、视图（View）、图表（Diagram）、缺省值（Default）、规则（Rule）、触发器（Trigger）、存储过程（Stored Procedure）、 用户（User）等。命名规范是指数据库对象如数据库（SCHEMA）、表（TABLE）、索引（INDEX）、约束（CONSTRAINTS）等的命名约定。</p>\n<h3> 数据库对象全局命名规范</h3>\n<p>1、命名使用具有意义的英文词汇，词汇中间以下划线分隔</p>\n<p>2、命名只能使用英文字母、数字、下划线，以英文字母开头</p>","y":"a","t":"","s":"数据库规范"},["/backend/数据库/数据库规范.html","/backend/数据库/数据库规范.md",":md"]],
  ["v-4b185ec6","/frontend/css/css.html",{"e":"<h2> css</h2>\n","y":"a","t":""},[":md"]],
  ["v-50af5219","/frontend/css/scss.html",{"e":"<h2> 使用 scss 完成主题切换</h2>\n<h3> @mixin</h3>\n<p>@mixin 可以理解为一个可以复用的 scss 组件，可以传递参数<br>\n然后可以使用@include 来引用他的值，也可以使用@content 来当做 slot，动态插入<br>\n简单的示例</p>\n<div class=\"language-scss line-numbers-mode\" data-ext=\"scss\"><pre class=\"language-scss\"><code><span class=\"token keyword\">@mixin</span> main_<span class=\"token function\">button</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$color</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$bg_color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$bg_color</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$color</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.5rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 在要用的地方使用@include引用</span>\n<span class=\"token selector\">.example_button </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">@include</span> main_<span class=\"token function\">button</span><span class=\"token punctuation\">(</span>#586c78<span class=\"token punctuation\">,</span> #7499fecd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 解析结果</span>\n<span class=\"token selector\">.example_button </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #7499fecd<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #586c78<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.5rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},[":md"]],
  ["v-0ce6a79c","/frontend/css/unocss.html",{"d":1700870400000,"l":"2023年11月25日","e":"<p><a href=\"https://alfred-skyblue.github.io/unocss-docs-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a><br>\n<a href=\"https://unocss.dev/interactive/\" target=\"_blank\" rel=\"noopener noreferrer\">交互文档忘了就查这玩意</a></p>\n<h2> 什么是 Unocss</h2>\n<p>简单来说就是 tailwind 的拓展</p>\n<h3> 特点</h3>\n<figure><figcaption></figcaption></figure>","y":"a","t":""},[":md"]],
  ["v-3a280ff9","/frontend/css/%E5%85%B3%E4%BA%8E%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%85%A8%E5%B1%80%E4%BD%BF%E7%94%A8scss%E5%8F%98%E9%87%8F.html",{"e":"<h2> 首先先在 styles 里整个 variable.scss</h2>\n<h2> 然后在 vite.config.ts 里引入以下内容</h2>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token literal-property property\">css</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">preprocessorOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">scss</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">javascriptEnabled</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">additionalData</span><span class=\"token operator\">:</span> <span class=\"token string\">'@import \"../src/assets/styles/variable.scss\";'</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"","s":"全局使用scss变量"},["/frontend/css/关于在vue项目中全局使用scss变量.html","/frontend/css/关于在vue项目中全局使用scss变量.md",":md"]],
  ["v-1015f1ce","/frontend/docker/docker.html",{"e":"<h2> docker 基本知识</h2>\n<p>容器是由镜像实例化而来，这和我们学习的面向对象的概念十分相似，我们可以把镜像看作类，把容器看作类实例化后的对象。</p>\n<p>也可以说镜像是文件, 容器是进程。 容器是基于镜像创建的, 即容器中的进程依赖于镜像中的文件, 这里的文件包括进程运行所需要的可执行文件， 依赖软件， 库文件， 配置文件等等...<br>\ndocker 的镜像概念类似虚拟机的镜像。是一个只读的模板，一个独立的文件系统，包括运行容器所需的数据，可以用来创建新的容器。</p>\n<p>例如：一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了 mysql 或用户需要的其他应用程序。</p>","y":"a","t":""},[":md"]],
  ["v-4063465c","/frontend/docker/docker%E9%83%A8%E7%BD%B2springboot_mysql.html",{"e":"<h2> 用 docker 部署 mysql 和 springboot</h2>\n<p>docker init 没带 springboot 玩，所以得自己配置</p>\n<h3> 配置文件</h3>\n<p>首先在 sb 的根目录下创建 Dockerfile，然后编写一些基础的配置<br>\n其实在这里重点关注 jdk 版本，然后工作路径，copy 的名字，可以直接写成 xx.jar 后面是打包后的名字 app.jar<br>\n我们常规来说要先打包 jar 才能 compose 那么其实可以在 dockerfile 里面直接写 RUN sh./mvnw package 就可以打包了</p>\n<div class=\"language-docker line-numbers-mode\" data-ext=\"docker\"><pre class=\"language-docker\"><code><span class=\"token comment\"># syntax=docker/dockerfile:1</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> openjdk:17-jdk-alpine <span class=\"token keyword\">as</span> base</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> sh ./mvnw package -DskipTests</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> openjdk:17-jdk-alpine <span class=\"token keyword\">as</span> prod</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> APPNAME=navigations</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token options\"><span class=\"token property\">--from</span><span class=\"token punctuation\">=</span><span class=\"token string\">base</span></span> /app/target/<span class=\"token variable\">$APPNAME</span>.jar app.jar</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 8080</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> JAVA_OPTS=<span class=\"token string\">\"\\\n  -server \\\n  -Xms256m \\\n  -Xmx512m \\\n  -XX:MetaspaceSize=256m \\\n  -XX:MaxMetaspaceSize=512m\"</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PARAMS=<span class=\"token string\">\"\"</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"sh\"</span>,<span class=\"token string\">\"-c\"</span>,<span class=\"token string\">\"java -jar $JAVA_OPTS app.jar $PARAMS\"</span>]</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"","s":"docker 部署 springboot+mysql"},["/frontend/docker/docker部署springboot_mysql.html","/frontend/docker/docker部署springboot+mysql.html","/frontend/docker/docker%E9%83%A8%E7%BD%B2springboot+mysql.html","/frontend/docker/docker部署springboot+mysql.md","/frontend/docker/docker%E9%83%A8%E7%BD%B2springboot+mysql.md"]],
  ["v-9d000fb0","/frontend/homo/homo%E5%85%A5%E9%97%A8.html",{"e":"<p>[toc]</p>\n<h2> 安装及配置</h2>\n<p><a href=\"\">官网下载 devco，一路 continue</a><br>\n然后会让选择 node 版本，需要$&gt;16&lt;18$ 所以这个时候要下载一个<a href=\"https://zhuanlan.zhihu.com/p/587008009\" target=\"_blank\" rel=\"noopener noreferrer\">fnm</a><br>\n然后使用 fnm 来切换版本</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token operator\">&gt;</span> fnm <span class=\"token function\">ls</span>\n* v16.20.2\n* v18.17.1 default, lts-latest\n* system\nfnm <span class=\"token parameter variable\">-v</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},["/frontend/homo/homo入门.html","/frontend/homo/homo入门.md",":md"]],
  ["v-486a3d5c","/frontend/homo/%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93.html",{"e":"<h1> 三方库集合</h1>\n<p><a href=\"https://gitee.com/openharmony-tpc/tpc_resource\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/openharmony-tpc/tpc_resource</a></p>\n<h2> ohpm 的坑</h2>\n<p>如果报错找不到 ohpm 什么的，这个是因为系统变量没有配置，在 path 里面将整个 ohpm 的地址放进去就好了，记得是管理员权限的系统变量，普通用户的也配置一下</p>\n<h2> ohos/axios</h2>","y":"a","t":"三方库集合"},["/frontend/homo/使用第三方库.html","/frontend/homo/使用第三方库.md",":md"]],
  ["v-c8ed824e","/frontend/javascript/eslint%E9%85%8D%E7%BD%AE.html",{"e":"<h2> 自动化更新的方法</h2>\n<p>在vscode settings.json中配置</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token string-property property\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"source.fixAll.eslint\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"source.organizeImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"eslint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"javascriptreact\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"typescript\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"typescriptreact\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"markdown\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"jsonc\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"yaml\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},["/frontend/javascript/eslint配置.html","/frontend/javascript/eslint配置.md",":md"]],
  ["v-48242312","/frontend/javascript/js.html",{"e":"<h2> 箭头函数</h2>\n<blockquote>\n<p>箭头函数是 ES6 中新增的函数定义方式，它是一种简化的函数表达式，箭头函数的语法比函数表达式更简洁，而且没有自己的 this，arguments，super 或 new.target。这些函数表达式最适合用于非方法函数，它们不能用作构造函数。<br>\n简单示例一下</p>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 1. 无参数</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  xxx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2. 可以简化那个框框，如果只有一个参数 会直接返回值</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 3. 还有一种在里面也需要return的，比如说vue的计算属性</span>\n<span class=\"token keyword\">const</span> computed <span class=\"token operator\">=</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},[":md"]],
  ["v-799e7154","/frontend/javascript/typescript.html",{"e":"<h2> ts 的应用场景</h2>\n<p>我们在什么时候会使用 ts 呢？<br>\n我们使用 typescript 的本质就是为了方便，让代码更加严谨，而且根据泛型的概念，使用泛型就是为了复用，所以在有复用参数的情况下，我们就需要做好接口然后要保证代码的观赏性</p>\n<h2> shuj</h2>\n<h3> 布尔值</h3>\n<p>最基本的数据类型就是简单的 true/false 值，在 JavaScript 和 TypeScript 里叫做<code>boolean</code>（其它语言中也一样）。</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>let isDone: boolean = false;\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":""},[":md"]],
  ["v-0512853b","/frontend/javascript/%E5%85%B3%E4%BA%8Ejs%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D.html",{"d":1697587200000,"l":"2023年10月18日","e":"<h2> 起因</h2>\n<p>在写我的 navigation 项目时，我拿取仓库的网站列表数据(存在 local 中),然后想使用一个 temp 数组在后台添加一个 checked 属性，以便更好的控制 checkbox 的状态，但是我发现，我在 temp 数组中添加 checked 属性后，local 中的数据也被添加了 checked 属性，这是为什么呢？<br>\n一开始我以为是 pinia 的持久化插件的问题，自动检测到我的数据变化就给我更新了<br>\n但是我把他注释掉后，而且使用了原生的 localStorage.setItem()方法，还是会出现这个问题，那我们继续排查</p>\n<ul>\n<li>先让我们看看代码<br>\n<br>\n在这里面我首先拿数据时就使用了解构赋值，然后我又使用了 map，map 本身就是获得一个新的数组，所以我想，我在 map 中添加 checked 属性，应该不会影响到原数组的，而且 console 出来的值也表示这俩货不相等，那么问题出现在哪里呢？</li>\n<li>检索网上+自己实验后发现，解构赋值在 1 层数组的时候实现的是深拷贝<br>\n</li>\n<li>但是我的 website 数组，嵌套了两层<br>\n<br>\n由此引出了解决方法<br>\n方法 1 是传统的<code>JSON.parse(JSON.stringify())</code>方法</li>\n</ul>","y":"a","t":"关于js的深拷贝和浅拷贝"},["/frontend/javascript/关于js的深拷贝和浅拷贝.html","/frontend/javascript/关于js的深拷贝和浅拷贝.md",":md"]],
  ["v-3a20ebc3","/frontend/javascript/%E5%85%B3%E4%BA%8Ets.html",{"y":"a","t":""},["/frontend/javascript/关于ts.html","/frontend/javascript/关于ts.md",":md"]],
  ["v-386fb589","/frontend/nodejs/%E4%BD%BF%E7%94%A8node%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.html",{"d":1666296000000,"l":"2022年10月21日","e":"<h2> 先在这里丢个代码</h2>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http-proxy-middleware\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    target<span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.openai.com/\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 无法代理以/api开头的请求</span>\n    changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onProxyRes</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>proxyRes<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      proxyRes<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">pathRewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 将请求路径中的 '/api' 替换为/*</span>\n      <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onProxyReq</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>proxyReq<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 删除 X-Forwarded-For 和 X-Real-IP 头信息 保证不会返回原始客户端的IP</span>\n      proxyReq<span class=\"token punctuation\">.</span><span class=\"token function\">removeHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Forwarded-For\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      proxyReq<span class=\"token punctuation\">.</span><span class=\"token function\">removeHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-Real-IP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">onProxyRes</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>proxyRes<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 删除敏感头信息</span>\n      <span class=\"token keyword\">delete</span> proxyRes<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"server\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> proxyRes<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"x-powered-by\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"使用node进行反向代理"},["/frontend/nodejs/使用node进行反向代理.html","/frontend/nodejs/使用node进行反向代理.md",":md"]],
  ["v-2446d3c0","/frontend/nodejs/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8express.html",{"d":1666224000000,"l":"2022年10月20日","y":"a","t":"简单使用express"},["/frontend/nodejs/简单使用express.html","/frontend/nodejs/简单使用express.md",":md"]],
  ["v-41454134","/frontend/projects/navigation.html",{"e":"<h2> 日志</h2>\n<h4> 将文档导出为Excel的方法&amp;&amp;好用的Arrayflat()</h4>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">XLSX</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'xlsx'</span>\n<span class=\"token comment\">// 注意这里要import * 不然会报错没有默认导出</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">exportToExcel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n  <span class=\"token comment\">// 创建一个工作簿</span>\n  <span class=\"token keyword\">const</span> workbook <span class=\"token operator\">=</span> <span class=\"token constant\">XLSX</span><span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">book_new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> temExcelArray <span class=\"token operator\">=</span> tempWebSiteList<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> bookmarks <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    bookmarks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> icon <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> icon <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>temExcelArray<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 创建一个工作表</span>\n\n  <span class=\"token keyword\">const</span> worksheet <span class=\"token operator\">=</span> <span class=\"token constant\">XLSX</span><span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">json_to_sheet</span><span class=\"token punctuation\">(</span>temExcelArray<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 将工作表添加到工作簿</span>\n  <span class=\"token constant\">XLSX</span><span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">book_append_sheet</span><span class=\"token punctuation\">(</span>workbook<span class=\"token punctuation\">,</span> worksheet<span class=\"token punctuation\">,</span> <span class=\"token string\">'拿到的所有书签数据'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 将工作簿保存为Excel文件</span>\n  <span class=\"token constant\">XLSX</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>workbook<span class=\"token punctuation\">,</span> <span class=\"token string\">'website_list.xlsx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},[":md"]],
  ["v-176a1bc0","/frontend/projects/tiptap.html",{"d":1704067200000,"l":"2024年1月1日","e":"<h2> 使用 tiptap 创建一个富文本编辑器</h2>\n<h2> 安装</h2>\n<h2> API</h2>\n<h3> Editor</h3>\n<p>编辑器就是像 wps 那样写东西的一个区域，tiptap 提供了一个 Editor 类，用于创建一个编辑器实例。<br>\n编辑器实例将提供一堆公共方法。方法是常规函数，可以返回任何内容。他们将帮助您使用编辑器。</p>\n<p>Don’t confuse methods with commands. Commands are used to change the state of editor (content, selection, and so on) and only return true or false.<br>\n不要将方法与命令混淆。命令用于更改编辑器的状态（内容、选择等），并且仅返回 true 或 false 。</p>","y":"a","t":"使用 tiptap 创建一个富文本编辑器"},[":md"]],
  ["v-26e7006c","/frontend/toys/parallax.html",{"e":"<h2> 简单介绍&amp;github 地址</h2>\n<p><a href=\"https://github.com/wagerfield/parallax\" target=\"_blank\" rel=\"noopener noreferrer\">github</a><br>\npalallax 是一个简单的视差 js 库，老东西了，很轻量，npm 可能都不太行了，然后使用就是通过在 html 上，用 data-depth 设置层级，然后在 js 里面监听 scene 然后调用就能用了<br>\n简单示例</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"line-numbers language-javascript\"><code><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"scene\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div data<span class=\"token operator\">-</span>depth<span class=\"token operator\">=</span><span class=\"token string\">\"0.2\"</span><span class=\"token operator\">&gt;</span>My first Layer<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div data<span class=\"token operator\">-</span>depth<span class=\"token operator\">=</span><span class=\"token string\">\"0.6\"</span><span class=\"token operator\">&gt;</span>My second Layer<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token comment\">// 运行视差</span>\n    <span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scene'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> parallaxInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parallax</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">relativeInput</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">clipRelativeInput</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">hoverOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Parallax来制造视差效果"},[":md"]],
  ["v-104011e4","/frontend/vue/element-plus%E4%BD%BF%E7%94%A8.html",{"d":1689811200000,"l":"2023年7月20日","e":"<h2> 基础使用</h2>\n<p>饿了么 plus 是基于 Vue3 的组件库，组件支持 ts，且很多功能都很完善了，拿来做后台刚好</p>\n<h3> 安装</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> element-plus\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"element-plus使用"},["/frontend/vue/element-plus使用.html","/frontend/vue/element-plus使用.md",":md"]],
  ["v-864d915e","/frontend/vue/gsap.html",{"e":"<h2> gsap的使用</h2>\n<h3> 基础知识</h3>\n<p>非常好，我将同时扮演GSAP教程作者和GSAP问题解答专家的角色来帮助您了解GSAP的常见用法和方法。</p>\n<p>GSAP是一个强大的JavaScript动画库，用于创建流畅、高性能的Web动画。以下是GSAP的一些常见用法和方法的解释：</p>\n<ol>\n<li><a href=\"http://TweenMax.to\" target=\"_blank\" rel=\"noopener noreferrer\">TweenMax.to</a>()：这是GSAP中最常用的方法之一，用于创建动画效果。它接受目标元素和动画选项作为参数，并在指定的持续时间内对元素应用动画效果。例如：</li>\n</ol>","y":"a","t":""},[":md"]],
  ["v-5bab0b8e","/frontend/vue/pinia.html",{"e":"<h2> state</h2>\n<p><br>\n</p>\n<h3> 如果在组件外使用 pinia(在.vue 之外)的方法</h3>\n<p><a href=\"https://pinia.vuejs.org/zh/core-concepts/outside-component-usage.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://pinia.vuejs.org/zh/core-concepts/outside-component-usage.html</a><br>\n这里会报一个通常的错</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>getActivePinia was called with no active Pinia. Did you forget to <span class=\"token function\">install</span> pinia? <span class=\"token comment\">#971</span>\n调用 getActivePinia 时没有激活 Pinia。你是不是忘记安装pinia了？\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},[":md"]],
  ["v-34929877","/frontend/vue/unpluginRouter.html",{"e":"<h2> 先思考</h2>\n<p>看到路由，无非是想到 3 个问题</p>\n<ol>\n<li>基础路由怎么配置</li>\n<li>动态路由/路由嵌套怎么做</li>\n<li>路由鉴权怎么做</li>\n</ol>\n<p><a href=\"https://juejin.cn/post/7245165497632964666\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.cn/post/7245165497632964666</a></p>\n<h2> unpluginRouter 文件路由</h2>\n<h2> 响应式函数实践文件路由</h2>","y":"a","t":"unpluginRouter文件路由"},[":md"]],
  ["v-5a9bcda4","/frontend/vue/vuebasic.html",{"d":1695600000000,"l":"2023年9月25日","e":"<h2> createApp()<a href=\"https://cn.vuejs.org/api/application.html#createapp\" target=\"_blank\" rel=\"noopener noreferrer\">​</a></h2>\n<h3> 创建一个应用实例</h3>\n<p><strong>类型</strong></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>  <span class=\"token keyword\">function</span> createApp<span class=\"token punctuation\">(</span>rootComponent: Component, rootProps?: object<span class=\"token punctuation\">)</span>: App\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":"vue3基础知识"},[":md"]],
  ["v-22c6ea4b","/frontend/vue/vueUse.html",{"e":"<h1> 记录一些用过的/常用的 vueUse 函数</h1>\n<h2> 首先当然是安装</h2>\n<p><a href=\"https://vueuse.org/\" target=\"_blank\" rel=\"noopener noreferrer\">用英文版的文档才是最新的</a></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">pnpm</span> i @vueuse/core\n<span class=\"token function\">pnpm</span> i @vueuse/integrations\n// nuxt\n<span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> @vueuse/nuxt @vueuse/core\n\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"记录一些用过的/常用的 vueUse 函数"},[":md"]],
  ["v-332d90a2","/frontend/vue/vue%E8%BF%9B%E9%98%B6.html",{"e":"<h3> 递归生成路由</h3>\n","y":"a","t":""},["/frontend/vue/vue进阶.html","/frontend/vue/vue进阶.md",":md"]],
  ["v-3d9ce8ec","/frontend/vue/%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5%E6%96%B9%E6%B3%95.html",{"e":"<h2> 想使用这玩意的原因</h2>\n<p>因为想到在我的 page 里如果可以动态导入图片的话，那么就可以理论上无限自定义滚动了。。而且这个东西的运用场景也挺多的，所以就赶紧去找了一下方法</p>\n<h2> 实现原理</h2>\n<h3> 动态导入图片</h3>\n<p>一个简单的示例</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> imglists <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">importImages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">imgNum</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> imgNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> imgPath <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@/assets/images/page</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.webp</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    imglists<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>imgPath<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},["/frontend/vue/动态导入方法.html","/frontend/vue/动态导入方法.md",":md"]],
  ["v-8b587d4e","/frontend/vue/%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8npm.html",{"e":"<h2> vite 启动模板 fork antfu</h2>\n<p><a href=\"https://github.com/bluestudyhard/vite-template\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/bluestudyhard/vite-template</a></p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> clone https://github.com/bluestudyhard/vite-template.git\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","y":"a","t":""},["/frontend/vue/构建项目常用npm.html","/frontend/vue/构建项目常用npm.md",":md"]],
  ["v-400c92fe","/frontend/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E8%AF%B7%E6%B1%82/TS%E5%B0%81%E8%A3%85axios.html",{"e":"<h2> Axios 提供了 raw 来提供原始数据</h2>\n<p>以下是一个简单的封装方法，具体可以根据 type 的不同来操作</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// type</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">toDoListType</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number\n  <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> boolean\n  text<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string\n  <span class=\"token literal-property property\">time</span><span class=\"token operator\">:</span> string\n\n  <span class=\"token comment\">// [proName: string]: an</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token doc-comment comment\">/**封装 */</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> AxiosInstance<span class=\"token punctuation\">,</span> AxiosRequestConfig<span class=\"token punctuation\">,</span> AxiosResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">service</span><span class=\"token operator\">:</span> AxiosInstance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  get<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> any<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>AxiosResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  post<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> any<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>AxiosResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  put<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> any<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>AxiosResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token keyword\">delete</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> any<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>AxiosResponse<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":""},["/frontend/前端常用请求/TS封装axios.html","/frontend/前端常用请求/TS封装axios.md",":md"]],
  ["v-1e95b163","/frontend/%E6%A0%B8%E5%BF%83%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%8E%9F%E7%90%86.html",{"e":"<h2> 线程与进程</h2>\n<h3> 什么是进程</h3>\n<p>进程简单来说可以理解为是一片内存空间。<br>\n比如说我手机开了一个微信，一个 QQ，那么系统就会为这两块应用开辟内存空间。<br>\n一个应用会有很多的进程，比如说浏览器的，渲染进程，浏览器进程，网络进程，GPU 进程等。</p>\n<h3> 什么是线程</h3>\n<p>线程，简单来理解就是跑代码的，在进程中负责执行相关的操作的，就是线程，一个进程最少有一个线程。<br>\n比如说在渲染进程里，会有一个渲染主线程负责渲染，<br>\n网络进程中，网络线程干活</p>\n<h2> 浏览器渲染过程</h2>\n<p>浏览器的渲染过程，首先，用户点击<br>\n<br>\n</p>","y":"a","t":""},["/frontend/核心理论知识/浏览器事件循环原理.html","/frontend/核心理论知识/浏览器事件循环原理.md",":md"]],
  ["v-5aa6403e","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0.html",{"e":"<h2> 第一章 操作系统概论</h2>\n<p>2023-12.25 今日目标是系统的对操作系统的知识过一遍，晚上再刷题，然后看数据库的网课，也过一遍</p>\n<h3> 什么是操作系统</h3>\n<p>操作系统是管理计算机硬件与软件的计算机程序，是直接在裸机上运行的程序，本质就是个程序，然后可以直接调用硬件的资源<br>\n用户通过操作系统实现对硬件资源的访问，对软件的控制</p>\n<h3> 操作系统的功能</h3>\n<h4> os 作为计算机系统的管理者</h4>\n<p><br>\n四大类计算机资源</p>\n<ul>\n<li>处理机管理<br>\n这玩意就涉及到进程，进程控制，进程调度，进程同步，进程通信</li>\n<li>存储器管理<br>\n内存分配，内存保护，内存扩充，地址映射</li>\n<li>i/o 设备管理<br>\n缓冲管理，设备分配，设备处理</li>\n<li>文件管理<br>\n文件存储空间管理，目录管理，文件读写保护管理（权限</li>\n</ul>","y":"a","t":""},["/计算机基础/操作系统/操作系统复习.html","/计算机基础/操作系统/操作系统复习.md",":md"]],
  ["v-14865716","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%AF%BB%E8%80%85%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98.html",{"e":"<h2> 读者和写者</h2>\n<p>读的时候不能写，写的时候不能读，读和写直接是互斥的，但是读和读之间没有互斥关系，写和写有互斥关系，只能同时存在一个写者</p>\n<figure><figcaption></figcaption></figure>\n<h2> 读者写者问题的解决方案</h2>\n<p>第一种是读优先</p>\n<figure><figcaption></figcaption></figure>\n<p>先看读者，第一个读者开读，然后互斥信号量--，这个互斥是为了让count的+能保证互斥，不然如果同时两个读者并发执行的话，有可能count的值会同时+1，这样就会导致读到错误的数据，所以要加一个互斥信号量，然后count++<br>\n然后第一个读者加完了以后就vmutex，加回去，然后下一个读者继续能读<br>\n写者这里就比较简单，有锁就不能写，写完才能解锁，这里的写者是互斥的，所以写者之间是不能并发的，只能一个一个的来</p>","y":"a","t":""},["/计算机基础/操作系统/读者写者问题.html","/计算机基础/操作系统/读者写者问题.md",":md"]],
  ["v-475ca693","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%EF%BC%8C%E7%BA%BF%E7%A8%8B.html",{"e":"<h2> 什么是进程</h2>\n<p>进程其实就是本质上就是系统上运行的一个程序，系统开辟出了一块内存空间，然后由 CPU 来逐行读取里面的指令，执行里面的指令</p>\n<h3> 进程的状态</h3>\n<p>创建态，就绪态，运行态，阻塞态，终止态</p>\n<p>创建态，new 一个进程，分配内存空间，分配 pcb</p>\n<p>就绪态，进程已经创建完毕，等待着 cpu 的调度</p>\n<p>运行态，进程在 cpu 上运行</p>\n<p>阻塞态，进程在等待着某个事件的发生，比如说等待着 IO，那么这个时候进程会被调度进入阻塞队列</p>\n<p>阻塞态又分就绪阻塞和等待阻塞<br>\n就绪阻塞在再次进入内存的时候可以直接运行<br>\n等待阻塞是，在阻塞的过程中，会先把进程的 pcb 保存到外存，等待着某个事件的发生，当事件发生的时候，会把进程的 pcb 重新加载到内存，然后进入就绪态<br>\n阻塞态的终止是需要另一个进程的提醒的，一个进程是不能够主动的切换阻塞状态的</p>","y":"a","t":""},["/计算机基础/操作系统/进程，线程.html","/计算机基础/操作系统/进程，线程.md",":md"]],
  ["v-9d957a02","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86.html",{"e":"<p>[toc]</p>\n<h1> 数据库系统基础</h1>\n<h2> 数据库系统概述</h2>\n<h3> 基本概念</h3>\n<ul>\n<li>什么是信息<br>\n信息是对客观事务的一种反映</li>\n<li>什么是数据<br>\n数据是对客观事务的一种符号表示，比如说，数字，字母，图像，声音，我都有对应的符号来表示</li>\n<li>什么是数据库<br>\n数据库是长期储存在计算机内，有<strong>组织，可共享</strong>的数据集合，不仅包括数据本身，还有数据之间的各种关系</li>\n<li>什么是数据库管理系统 DBMS<br>\n数据库管理系统简单理解就是像 Navicat 那样的，可以对数据库进行增删改查，储存数据库，数据表的运行管理等功能的系统<br>\n</li>\n<li>什么是数据库系统 DBS<br>\nDBS 就是由数据库，数据库管理系统，数据管理员，应用开发人员，数据库设计人员，最终用户，组成的一个完整的数据库环境，就是数据库生态啦<br>\n</li>\n</ul>","y":"a","t":"数据库系统基础"},["/计算机基础/数据库系统/数据库原理.html","/计算机基础/数据库系统/数据库原理.md",":md"]],
  ["v-0874484d","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html",{"e":"<p>[toc]</p>\n<h2> from the beginning</h2>\n<p>我们要知道的考试的最核心的重点<br>\n首先关系数据库，关系代数不用多说<br>\n数据库完整性，考什么关系范式的，必考<br>\n数据库的设计，什么逻辑设计，物理设计，必考<br>\n数据库的安全性，提一嘴<br>\n并发控制，必考，他上课说了挺久的<br>\n还有什么关系型数据库的函数依赖，这 b 东西必考，而且选填肯定很多<br>\n就是函数依赖，部分依赖什么的</p>\n<h2> 数据库系统的基本概念(绪论)</h2>\n<p>什么是模式<br>\n模式有内模式和外模式，其实就是用户可以看到的数据库结构，包括表的结构，数据什么的<br>\n应该数据库可以有多个外模式，也就是，多个用户看到的这个数据结构可能是不一样的，那内模式就是数据库的所有物理结构和存储方式的一个描述<br>\n也可以从权限去理解，超管可以看到内模式</p>","y":"a","t":""},["/计算机基础/数据库系统/数据库原理期末复习.html","/计算机基础/数据库系统/数据库原理期末复习.md",":md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},[]],
  ["v-2d09fb6e","/AI/",{"y":"p","t":"A I"},[]],
  ["v-1263361b","/CsCommon/",{"y":"p","t":"Cs Common"},[]],
  ["v-f0383c18","/linux/",{"y":"p","t":"Linux"},[]],
  ["v-d6e0b3f8","/UiDesign/",{"y":"p","t":"Ui Design"},[]],
  ["v-d5c1c75c","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/",{"y":"p","t":"计算机基础"},["/计算机基础/"]],
  ["v-186a1382","/backend/python/",{"y":"p","t":"Python"},[]],
  ["v-5dea90b9","/backend/java/",{"y":"p","t":"Java"},[]],
  ["v-94d5648e","/backend/%E6%95%B0%E6%8D%AE%E5%BA%93/",{"y":"p","t":"数据库"},["/backend/数据库/"]],
  ["v-38c033e0","/frontend/css/",{"y":"p","t":"Css"},[]],
  ["v-19e3d00b","/frontend/docker/",{"y":"p","t":"Docker"},[]],
  ["v-debd1d3c","/frontend/homo/",{"y":"p","t":"Homo"},[]],
  ["v-72d11f44","/frontend/javascript/",{"y":"p","t":"Javascript"},[]],
  ["v-2aed90c0","/frontend/nodejs/",{"y":"p","t":"Nodejs"},[]],
  ["v-57ce3c1e","/frontend/projects/",{"y":"p","t":"Projects"},[]],
  ["v-dd6a8e14","/frontend/toys/",{"y":"p","t":"Toys"},[]],
  ["v-38aee226","/frontend/vue/",{"y":"p","t":"Vue"},[]],
  ["v-63ffacf9","/frontend/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E8%AF%B7%E6%B1%82/",{"y":"p","t":"前端常用请求"},["/frontend/前端常用请求/"]],
  ["v-4125e9f4","/frontend/%E6%A0%B8%E5%BF%83%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/",{"y":"p","t":"核心理论知识"},["/frontend/核心理论知识/"]],
  ["v-5440e2ab","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{"y":"p","t":"操作系统"},["/计算机基础/操作系统/"]],
  ["v-c3a3ed0e","/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/",{"y":"p","t":"数据库系统"},["/计算机基础/数据库系统/"]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":false},[]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":false},[]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":false},[]],
  ["v-154dc4c4","/star/",{"y":"p","t":"星标","I":false},[]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":false},[]],
  ["v-03d57386","/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{"y":"p","t":"使用指南 分类","I":false},["/category/使用指南/"]],
  ["v-83e1f92e","/tag/%E7%A6%81%E7%94%A8/",{"y":"p","t":"标签: 禁用","I":false},["/tag/禁用/"]],
  ["v-1e447d61","/tag/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/",{"y":"p","t":"标签: 文章加密","I":false},["/tag/文章加密/"]],
  ["v-484552dc","/tag/markdown/",{"y":"p","t":"标签: Markdown","I":false},[]],
  ["v-a378ad66","/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{"y":"p","t":"标签: 页面配置","I":false},["/tag/页面配置/"]],
  ["v-7b167472","/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{"y":"p","t":"标签: 使用指南","I":false},["/tag/使用指南/"]],
]
