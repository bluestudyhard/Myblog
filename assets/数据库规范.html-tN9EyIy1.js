import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as p,c as s,b as e,d as a,e as n,f as r}from"./app-xEYoAD2G.js";const c={},o=r('<h2 id="数据库对象命名规范" tabindex="-1"><a class="header-anchor" href="#数据库对象命名规范" aria-hidden="true">#</a> 数据库对象命名规范</h2><h3 id="数据库对象" tabindex="-1"><a class="header-anchor" href="#数据库对象" aria-hidden="true">#</a> 数据库对象</h3><p>数据库对象是数据库的组成部分，常见的有以下几种：表（Table ）、索引（Index）、视图（View）、图表（Diagram）、缺省值（Default）、规则（Rule）、触发器（Trigger）、存储过程（Stored Procedure）、 用户（User）等。命名规范是指数据库对象如数据库（SCHEMA）、表（TABLE）、索引（INDEX）、约束（CONSTRAINTS）等的命名约定。</p><h3 id="数据库对象全局命名规范" tabindex="-1"><a class="header-anchor" href="#数据库对象全局命名规范" aria-hidden="true">#</a> 数据库对象全局命名规范</h3><p>1、命名使用具有意义的英文词汇，词汇中间以下划线分隔</p><p>2、命名只能使用英文字母、数字、下划线，以英文字母开头</p><p>3、避免用 MySQL 的保留字如：backup、call、group 等</p><p>4、所有数据库对象使用小写字母，实际上 MySQL 中是可以设置大小写是否敏感的，为了保证统一性，我们这边规范全部小写表示。</p><h3 id="数据库命名规范" tabindex="-1"><a class="header-anchor" href="#数据库命名规范" aria-hidden="true">#</a> 数据库命名规范</h3><p>1、数据库命名尽量不超过 30 个字符。</p><p>2、数据库命名一般为项目名称+代表库含义的简写，比如 IM 项目的工作流数据库，可以是 im_flow。</p><p>3、数据库创建时必须添加默认字符集和校对规则子句。默认字符集为 UTF8（已迁移 dumbo 的使用 utf8mb4）</p><p>4、命名应使用小写。</p><h3 id="表命名规范" tabindex="-1"><a class="header-anchor" href="#表命名规范" aria-hidden="true">#</a> 表命名规范</h3><p>1、常规表表名以 t_开头，t 代表 table 的意思，命名规则即 t + 模块（包含模块含义的简写）+ 表（包含表含义的简写），比如用户模块的教育信息表：t_user_eduinfo。</p><p>2、临时表（RD、QA 或 DBA 同学用于数据临时处理的表），命名规则：temp 前缀+模块+表+日期后缀：temp_user_eduinfo_20210719</p><p>3、备份表（用于保存和归档历史数据或者作为灾备恢复的数据）命名规则，bak 前缀+模块+表+日期后缀：bak_user_eduinfo_20210719</p><p>4、同一个模块的表尽可能使用相同的前缀，表名称尽可能表达含义</p><p>5、多个单词以下划线 _ 分隔<br> 6、常规表表名尽量不超过 30 个字符，temp 表和 bak 表视情况而定，也尽量简短为宜，命名应使用小写</p><h3 id="字段命名规范" tabindex="-1"><a class="header-anchor" href="#字段命名规范" aria-hidden="true">#</a> 字段命名规范</h3><p>1、字段命名需要表示其实际含义的英文单词或简写，单词之间用下划线 _ 进行连接，如 service_ip、service_port。</p><p>2、各表之间相同意义的字段必须同名，比如 a 表和 b 表都有创建时间，应该统一为 create_time，不一致会很混乱。</p><p>3、多个单词以下划线 _ 分隔</p><p>4、字段名尽量不超过 30 个字符，命名应该使用小写</p><h3 id="索引命名规范" tabindex="-1"><a class="header-anchor" href="#索引命名规范" aria-hidden="true">#</a> 索引命名规范</h3><p>1、索引使用 uni + 字段名 来命名：create unique index uni_uid on t_user_basic(uid)<br> 2、非索引使用 idx + 字段名 来命名：create index idx_uname_mobile on t_user_basic(uname,mobile)</p><p>3、多个单词以下划线 _ 分隔。</p><p>4、索引名尽量不超过 50 个字符，命名应该使用小写，组合索引的字段不宜太多，不然也不利于查询效率的提升。</p><p>5、多单词组成的列名，取尽可能代表意义的缩写，如 test_contact 表 member_id 和 friend_id 上的组合索引：idx_mid_fid。</p><p>6、理解组合索引左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。</p><h3 id="视图命名规范" tabindex="-1"><a class="header-anchor" href="#视图命名规范" aria-hidden="true">#</a> 视图命名规范</h3><p>1、视图名以 v 开头，表示 view，完整结构是 v+视图内容含义缩写。</p><p>2、如果视图只来源单个表，则为 v+表名。如果视图由几个表关联产生就用 v+下划线（_）连接几个表名，视图名尽量不超过 30 个字符。如超过 30 个字符则取简写。</p><p>3、如无特殊需要，严禁开发人员创建视图。</p><p>4、命名应使用小写。</p><h3 id="存储过程命名规范" tabindex="-1"><a class="header-anchor" href="#存储过程命名规范" aria-hidden="true">#</a> 存储过程命名规范</h3><p>1、存储过程名以 sp 开头，表示存储过程（storage procedure）。之后多个单词以下划线（_）进行连接。存储过程命名中应体现其功能。存储过程名尽量不能超过 30 个字符。</p><p>2、存储过程中的输入参数以 i<em>开头，输出参数以 o</em>开头。</p><p>3、命名应使用小写。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 create procedure sp_multi_param(in i_id bigint,in i_name varchar(32),out o_memo varchar(100))  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="函数命名规范" tabindex="-1"><a class="header-anchor" href="#函数命名规范" aria-hidden="true">#</a> 函数命名规范</h3><p>1、函数名以 func 开始，表示 function。之后多个单词以下划线（_）进行连接，函数命名中应体现其功能。函数名尽量不超过 30 个字符。</p><p>2、命名应使用小写。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 create function func_format_date(ctime datetime)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="触发器命名规范" tabindex="-1"><a class="header-anchor" href="#触发器命名规范" aria-hidden="true">#</a> 触发器命名规范</h3><p>1、触发器以 trig 开头，表示 trigger 触发器。</p><p>2、基本部分，描述触发器所加的表，触发器名尽量不超过 30 个字符。</p><p>3、后缀（_i,_u,_d）,表示触发条件的触发方式（insert,update 或 delete）。</p><p>4、命名应使用小写。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 DROP TRIGGER IF EXISTS trig_attach_log_d;2 CREATE TRIGGER trig_attach_log_d AFTER DELETE ON t_dept FOR EACH ROW; \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="约束命名规范" tabindex="-1"><a class="header-anchor" href="#约束命名规范" aria-hidden="true">#</a> 约束命名规范</h3><p>1、约束：uk<em>表名称</em>字段名。uk 是 UNIQUE KEY 的缩写。比如给一个部门的部门名称加上约束，来保证不重名，如下：ALTER TABLE t_dept ADD CONSTRAINT un_name UNIQUE(name);</p><p>2、外键约束：fk<em>表名，后面紧跟该外键所在的表名和对应的主表名（不含 t</em>）。子表名和父表名用下划线(_)分隔。如下：ALTER TABLE t_user ADD CONSTRAINT fk_user_dept FOREIGN KEY(depno) REFERENCES t_dept (id);</p><p>3、非空约束：如无特殊需要，建议所有字段默认非空(not null)，不同数据类型必须给出默认值(default)。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 `id` int(11) NOT NULL,2 `name` varchar(30) DEFAULT &#39;&#39;,3 `deptId` int(11) DEFAULT ,4 `salary` float DEFAULT NULL, \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4、出于性能考虑，如无特殊需要，建议不使用外键。参照完整性由代码控制。这个也是我们普遍的做法，从程序角度进行完整性控制，但是如果不注意，也会产生脏数据。</p><p>5、命名应使用小写。</p><h3 id="用户命名规范" tabindex="-1"><a class="header-anchor" href="#用户命名规范" aria-hidden="true">#</a> 用户命名规范</h3><p>1、 生产使用的用户命名格式为 code_应用</p><p>2、 只读用户命名规则为 read_应用</p><h2 id="数据库对象设计规范" tabindex="-1"><a class="header-anchor" href="#数据库对象设计规范" aria-hidden="true">#</a> 数据库对象设计规范</h2><h3 id="存储引擎的选择" tabindex="-1"><a class="header-anchor" href="#存储引擎的选择" aria-hidden="true">#</a> 存储引擎的选择</h3><p>1、如无特殊需求，必须使用 innodb 存储引擎。</p>',63),h={href:"https://z.itpub.net/article/detail/BD059272E6AF916F0A77A049617BF641",target:"_blank",rel:"noopener noreferrer"},l=e("p",null,"基本的差别为：MyISAM 类型不支持事务处理等处理，而 InnoDB 类型支持。MyISAM 类型的表强调的是性能，其执行速度比 InnoDB 类型更快，但是不提供事务支持，而 InnoDB 提供事务支持以及外部键等数据库功能。",-1),u=e("p",null,"另外，MySQL 系列面试题和答案全部整理好了，微信搜索 Java 技术栈，在后台发送：面试，可以在线阅读。",-1),_=e("h3",{id:"字符集的选择",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#字符集的选择","aria-hidden":"true"},"#"),a(" 字符集的选择")],-1),b=e("p",null,"1、如无特殊要求，必须使用 utf8 或 utf8mb4。",-1),m=e("p",null,[a("在国内，选择对中文和各语言支持都非常完善的"),e("code",null,"utf8"),a("格式是好的方式，MySQL 在 5.5 之后增加 utf8mb4 编码，mb4 就是 most bytes 4 的意思，专门用来兼容四字节的 unicode。")],-1),f={href:"http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&mid=2247486173&idx=2&sn=0603756b36279b5f5f036151af85f9fd&chksm=eb538febdc2406fd70748604c500eeaea584306c137cb2020ab5a72187c9359926015e00a46d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},x=r('<p>可以使用如下脚本来查看数据库的编码格式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 SHOW VARIABLES WHERE Variable_name LIKE &#39;character_set_%&#39; OR Variable_name LIKE &#39;collation%&#39;;2 -- 或3 SHOW VARIABLES Like &#39;%char%&#39;;  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="表设计规范" tabindex="-1"><a class="header-anchor" href="#表设计规范" aria-hidden="true">#</a> 表设计规范</h3><p>1、不同应用间所对应的数据库表之间的关联应尽可能减少，不允许使用外键对表之间进行关联，确保组件对应的表之间的独立性，为系统或表结构的重构提供可能性。目前业内的做法一般 由程序控制参照完整性。</p><p>2、表设计的角度不应该针对整个系统进行数据库设计，而应该根据系统架构中组件划分，针对每个组件所处理的业务进行数据库设计。</p><p>3、表必须要有 PK，主键的优势是标识、有效引用、高效检索，所以一般情况下尽量有主键字段。</p><p>4、一个字段只表示一个含义。</p><p>5、表不应该有重复列。</p><p>6、禁止使用复杂数据类型(数组,自定义等)，Json 类型的使用视情况而定。</p><p>7、需要 join 的字段(连接键)，数据类型必须保持一致，避免隐式转换。比如关联的字段都是 int 类型。</p><p>8、设计应至少满足第三范式,尽量减少数据冗余。一些特殊场景允许反范式化设计，但在项目评审时需要对冗余字段的设计给出解释。</p><p>9、TEXT 字段作为大体量文本存储，必须放在独立的表中 , 用 PK 与主表关联。如无特殊需要，禁止使用 TEXT、BLOB 字段。</p><p>10、需要定期删除(或者转移)过期数据的表，通过分表解决，我们的做法是按照 2/8 法则将操作频率较低的历史数据迁移到历史表中，按照时间或者则曾 Id 做切割点。</p><p>11、单表字段数不要太多，建议多不要大于 50 个。过度的宽表对性能也是很大的影响。</p><p>12、MySQL 在处理大表时，性能就开始明显降低，所以建议单表物理大小限制在 16GB，表中数据行数控制在 2000W 内。</p><p>业内的规则是超过 2000W 性能开始明显降低。但是这个值是灵活的，你可以根据实际情况进行测试来判断，比如阿里的标准就是 500W，百度的确是 2000W。实际上是否宽表，单行数据所占用的空间都有起到作用的。</p><p>13、如果数据量或数据增长在前期规划时就较大，那么在设计评审时就应加入分表策略，后续会有专门的文章来分析数据拆分的做法：垂直拆分（垂直分库和垂直分表）、水平拆分（分库分表和库内分表）；</p><p>14、无特殊需求，严禁使用分区表</p><h3 id="字段设计规范" tabindex="-1"><a class="header-anchor" href="#字段设计规范" aria-hidden="true">#</a> 字段设计规范</h3><p>1、INT：如无特殊需要，存放整型数字使用 UNSIGNED INT 型，整型字段后的数字代表显示长度。比如  <code>id</code> int(11) NOT NULL</p><p>2、DATETIME：所有需要到时间(时分秒)的字段均使用 DATETIME,不要使用 TIMESTAMP 类型。</p><p>对于 TIMESTAMP，它把写入的时间从当前时区转化为 UTC（世界标准时间）进行存储。查询时，将其又转化为客户端当前时区进行返回。而对于 DATETIME，不做任何改变，基本上是原样输入和输出。</p><p>另外 DATETIME 存储的范围也比较大：</p><p>timestamp 所能存储的时间范围为：&#39;1970-01-01 00:00:01.000000&#39; 到 &#39;2038-01-19 03:14:07.999999&#39;。</p><p>datetime 所能存储的时间范围为：&#39;1000-01-01 00:00:00.000000&#39; 到 &#39;9999-12-31 23:59:59.999999&#39;。</p><p>但是特殊情况，对于跨时区的业务，TIMESTAMP 更为合适</p><p>3、VARCHAR：所有动态长度字符串 全部使用 VARCHAR 类型,类似于状态等有限类别的字段,也使用可以比较明显表示出实际意义的字符串,而不应该使用 INT 之类的数字来代替；VARCHAR(N)，<br> N 表示的是字符数而不是字节数。比如 VARCHAR(255)，可以大可存储 255 个字符（字符包括英文字母，汉字，特殊字符等）。但 N 应尽可能小，因为 MySQL 一个表中所有的 VARCHAR 字段大长度是 65535 个字节，且存储字符个数由所选字符集决定。</p><p>如 UTF8 存储一个字符大要 3 个字节，那么 varchar 在存放占用 3 个字节长度的字符时不应超过 21845 个字符。同时，在进行排序和创建临时表一类的内存操作时，会使用 N 的长度申请内存。(如无特殊需要，原则上单个 varchar 型字段不允许超过 255 个字符</p><p>4、TEXT：仅仅当字符数量可能超过 20000 个的时候,才可以使用 TEXT 类型来存放字符类数据,因为所有 MySQL 数据库都会使用 UTF8 字符集。<br> 所有使用 TEXT 类型的字段必须和原表进行分拆，与原表主键单独组成另外一个表进行存放，与大文本字段的隔离，目的是。如无特殊需要，不使用 MEDIUMTEXT、TEXT、LONGTEXT 类型</p><p>5、对于浮点型数据存储，需要使用 DECIMAL，严禁使用 FLOAT 和 DOUBLE。</p><p>6、如无特殊需要，尽量不使用 BLOB 类型</p><p>7、如无特殊需要，字段建议使用 NOT NULL 属性，可用默认值代替 NULL(<br> 8、自增字段类型必须是整型且必须为 UNSIGNED，推荐类型为 INT 或 BIGINT，并且自增字段必须是主键或者主键的一部分。</p><h3 id="索引设计规范" tabindex="-1"><a class="header-anchor" href="#索引设计规范" aria-hidden="true">#</a> 索引设计规范</h3><p>1、索引区分度</p><p>索引必须创建在索引选择性（区分度）较高的列上，选择性的计算方式为:  selecttivity = count(distinct c_name)/count(*) ; 如果区分度结果小于 0.2，则不建议在此列上创建索引，否则大概率会拖慢 SQL 执行</p><p>2、遵循左前缀</p><p>对于确定需要组成组合索引的多个字段，设计时建议将选择性高的字段靠前放。使用时，组合索引的首字段，必须在 where 条件中，且需要按照左前缀规则去匹配。</p><p>3、禁止使用外键，可以在程序级别来约束完整性</p><p>4、Text 类型字段如果需要创建索引，必须使用前缀索引</p><p>5、单张表的索引数量理论上应控制在 5 个以内。经常有大批量插入、更新操作表，应尽量少建索引，索引建立的原则理论上是多读少写的场景。</p><p>6、ORDER BY，GROUP BY，DISTINCT 的字段需要添加在索引的后面，形成覆盖索引</p><p>7、正确理解和计算索引字段的区分度，文中有计算规则，区分度高的索引，可以快速得定位数据，区分度太低，无法有效的利用索引，可能需要扫描大量数据页，和不使用索引没什么差别。</p><p>8、正确理解和计算前缀索引的字段长度，文中有判断规则，合适的长度要保证高的区分度和恰当的索引存储容量，只有达到佳状态，才是保证高效率的索引。</p><p>9、联合索引注意左匹配原则：必须按照从左到右的顺序匹配，MySQL 会一直向右匹配索引直到遇到范围查询(&gt;、&lt;、between、like)然后停止匹配。</p><p>如：depno=1 and empname&gt;&#39;&#39; and job=1 如果建立(depno,empname,job)顺序的索引，job 是用不到索引的。<br> 10、应需而取策略，查询记录的时候，不要一上来就使用*，只取需要的数据，可能的话尽量只利用索引覆盖，可以减少回表操作，提升效率。</p><p>11、正确判断是否使用联合索引（上面联合索引的使用那一小节有说明判断规则），也可以进一步分析到索引下推（IPC），减少回表操作，提升效率。<br> 12、避免索引失效的原则：禁止对索引字段使用函数、运算符操作，会使索引失效。这是实际上就是需要保证索引所对应字段的”干净度“。</p><p>13、避免非必要的类型转换，字符串字段使用数值进行比较的时候会导致索引。<br> 14、模糊查询&#39;%value%&#39;会使索引，变为全表扫描，因为无法判断扫描的区间，但是&#39;value%&#39;是可以有效利用索引。</p><p>15、索引覆盖排序字段，这样可以减少排序步骤，提升查询效率</p><p>16、尽量的扩展索引，非必要不新建索引。比如表中已经有 a 的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。<br> 举例子：比如一个品牌表，建立的的索引如下，一个主键索引，一个索引</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 PRIMARY KEY (`id`),2 UNIQUE KEY `uni_brand_define` (`app_id`,`define_id`)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当你同事业务代码中的检索语句如下的时候，应该立即警告了，即没有覆盖索引，也没按照左前缀原则：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 select brand_id,brand_name from  ds_brand_system where status=?  and define_id=?  and app_id=?\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议改成如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 select brand_id,brand_name from  ds_brand_system where app_id=? and define_id=?  and  status=? \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="约束设计规范" tabindex="-1"><a class="header-anchor" href="#约束设计规范" aria-hidden="true">#</a> 约束设计规范</h3><p>1、PK 应该是有序并且无意义的，由开发人员自定义，尽可能简短，并且是自增序列。</p><p>2、表中除 PK 以外,还存在性约束的,可以在数据库中创建以“uk_”作为前缀的约束索引。</p><p>3、PK 字段不允许更新。</p><p>4、禁止创建外键约束，外键约束由程序控制。</p><p>5、如无特殊需要，所有字段必须添加非空约束，即 not null。</p><p>6、如无特殊需要，所有字段必须有默认值。</p><h2 id="sql-使用规范" tabindex="-1"><a class="header-anchor" href="#sql-使用规范" aria-hidden="true">#</a> SQL 使用规范</h2><h3 id="select-检索的规范性" tabindex="-1"><a class="header-anchor" href="#select-检索的规范性" aria-hidden="true">#</a> <strong>select 检索的规范性</strong></h3><p>1、尽量避免使用<code>select *</code>，join 语句使用<code>select *</code>可能导致只需要访问索引即可完成的查询需要回表取数。</p><p>一种是可能取出很多不需要的数据，对于宽表来说，这是灾难；一种是尽可能避免回表，因为取一些根本不需要的数据而回表导致性能低下，是很不合算。</p><p>2、严禁使用 select * from t_name ，而不加任何 where 条件，道理一样，这样会变成全表全字段扫描。</p><p>3、MySQL 中的 text 类型字段存储：</p><p>3.1、不与其他普通字段存放在一起,因为读取效率低，也会影响其他轻量字段存取效率。</p><p>3.2、如果不需要 text 类型字段，又使用了 select *，会让该执行消耗大量 io，效率也很低下</p><p>4、在取出字段上可以使用相关函数，但应尽可能避免出现 now() , rand() , sysdate() 等不确定结果的函数，在 Where 条件中的过滤条件字段上严禁使用任何函数，包括数据类型转换函数。大量的计算和转换会造成效率低下，这个在索引那边也描述过了。</p><p>5、分页查询语句全部都需要带有排序条件 , 否则很容易引起乱序</p><p>6、用 in()/union 替换 or，效率会好一些，并注意 in 的个数小于 300</p><p>7、严禁使用%前缀进行模糊前缀查询:如：select a,b,c from t_name where a like ‘%name’; 可以使用%模糊后缀查询如：select a,b from t_name where a like ‘name%’;</p><p>8、避免使用子查询，可以把子查询优化为 join 操作</p><p>通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句)时，才可以把子查询转化为关联查询进行优化。</p><p>子查询性能差的原因：</p><p><strong>·</strong>  子查询的结果集无法使用索引，通常子查询的结果集就会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能 会受到一定的影响；</p><p><strong>·</strong>  特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大；</p><p><strong>·</strong>  由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。</p><h3 id="操作的规范性" tabindex="-1"><a class="header-anchor" href="#操作的规范性" aria-hidden="true">#</a> <strong>操作的规范性</strong></h3><p>1、禁止使用不含字段列表的 INSERT 语句</p><p>如：insert into values (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);   应使用  insert into t_name(c1,c2,c3) values (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;); 。</p><p>2、大批量写操作（UPDATE、DELETE、INSERT），需要分批多次进行操作</p><p><strong>·</strong>  大批量操作可能会造成严重的主从延迟，特别是主从模式下，大批量操作可能会造成严重的主从延迟，因为需要 slave 从 master 的 binlog 中读取日志来进行数据同步。</p><p><strong>·</strong> binlog 日志为 row 格式时会产生大量的日志</p><h2 id="程序上的约束" tabindex="-1"><a class="header-anchor" href="#程序上的约束" aria-hidden="true">#</a> 程序上的约束</h2><p>后续我们团队的目标是研发评审工具对开发同学提交的建库、建表、刷数据、查询的语句进行分析，看看是否符合应有的规范。如果不符合，驳回修改。</p>',87);function E(T,v){const d=i("ExternalLinkIcon");return p(),s("div",null,[o,e("p",null,[a("可以通过 show variables like 'default_storage_engine' 来查看当前默认引擎。主要有 MyISAM 和 InnoDB，从 5.5 版本开始默认使用 InnoDB 引擎。点击这里进行刷题。("),e("a",h,[a("https://z.itpub.net/article/detail/BD059272E6AF916F0A77A049617BF641"),n(d)]),a(")")]),l,u,_,b,m,e("p",null,[a("所以 utf8mb4 是 utf8 的超集，除了将编码改为 utf8mb4 外不需要做其他转换。当然，为了节省空间，一般情况下使用 utf8 也就够了。推荐看下：MySQL "),e("a",f,[a("数据库开发的 36 条军规"),n(d)]),a("。")]),x])}const A=t(c,[["render",E],["__file","数据库规范.html.vue"]]);export{A as default};
