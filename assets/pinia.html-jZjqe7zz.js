import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c as i,b as n,d as s,e as c,f as a}from"./app-xEYoAD2G.js";const l="/assets/image-tfCc7DFn.png",r="/assets/image-tfCc7DFn.png",u="/assets/20230919165929-aX08ypJr.png",d="/assets/20231124205129-BJ84YfW7.png",k="/assets/20231124205202-MVZy5T0i.png",m="/assets/20231124205055-vV0izRiW.png",h="/assets/20231124205324-YMrX4XDP.png",v={},g=a('<h2 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> state</h2><p><img src="'+l+'" alt="Alt text" loading="lazy"><br><img src="'+r+'" alt="Alt text" loading="lazy"></p><h3 id="如果在组件外使用-pinia-在-vue-之外-的方法" tabindex="-1"><a class="header-anchor" href="#如果在组件外使用-pinia-在-vue-之外-的方法" aria-hidden="true">#</a> 如果在组件外使用 pinia(在.vue 之外)的方法</h3>',3),b={href:"https://pinia.vuejs.org/zh/core-concepts/outside-component-usage.html",target:"_blank",rel:"noopener noreferrer"},_=n("br",null,null,-1),f=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>getActivePinia was called with no active Pinia. Did you forget to <span class="token function">install</span> pinia? <span class="token comment">#971</span>
调用 getActivePinia 时没有激活 Pinia。你是不是忘记安装pinia了？
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 github 上搜索后就找到相关的解决方法了，官方文档也指出了怎么处理</p><p>简单来说就是，把 useStore 在函数里面使用就可以了，一般也是用于路由守卫或者请求拦截器<br><img src="`+u+`" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">userStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> token <span class="token operator">=</span> useUserStore<span class="token punctuation">.</span>token<span class="token punctuation">;</span>
  <span class="token comment">// 判断是否登录</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 未登录</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">!==</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没登录的话怎么都是指向login</span>
    <span class="token keyword">else</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 判断是否有权限</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> actions</h2><p>actions 就是仓库自带的一些方法，也就是仓库自带的函数，一般使用 actions 的时候都是在一开始我就需要一些数据时，由仓库自己调用，然后获取<br> 比如说，开局我要发送登录请求，或者开局我登录以后我要获取用户信息，这个时候就可以考虑使用 actions</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h2 id="各种使用tips" tabindex="-1"><a class="header-anchor" href="#各种使用tips" aria-hidden="true">#</a> 各种使用tips</h2><h3 id="关于响应式数据的问题" tabindex="-1"><a class="header-anchor" href="#关于响应式数据的问题" aria-hidden="true">#</a> 关于响应式数据的问题</h3><p>如果在组件内使用store的话，用storeTorefs调用state，然后在template里面更新数据是会响应式更新的<br><img src="`+d+'" alt="" loading="lazy"></p><p>然后调用里面的get函数的话，也是可以响应式更新的<br><img src="'+k+'" alt="" loading="lazy"><br><img src="'+m+'" alt="" loading="lazy"></p><p>但是如果隔了两层的话就不行了，就是如果在actions里面再调用get函数的话，就不会响应式更新了</p><p><img src="'+h+'" alt="" loading="lazy"><br> 这样添加了以后页面数据是没有更新的</p>',13);function x(y,z){const t=o("ExternalLinkIcon");return p(),i("div",null,[g,n("p",null,[n("a",b,[s("https://pinia.vuejs.org/zh/core-concepts/outside-component-usage.html"),c(t)]),_,s(" 这里会报一个通常的错")]),f])}const j=e(v,[["render",x],["__file","pinia.html.vue"]]);export{j as default};
