import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as h,o as t,c as n,b as a,d as s,e as d,f as r}from"./app-xEYoAD2G.js";const l="/assets/20231014192220-uHlUOIqq.png",o="/assets/20231014194510-k25iycVv.png",c="/assets/20231014210313-te9XS9it.png",b="/assets/20231008230926-9FtJRLBM.png",p="/assets/20231008231135-Lh1LaT4a.png",_="/assets/20231008231342-7O4soseU.png",g="/assets/20231105235152-4OrgOrGo.png",u="/assets/20231106000107-KMsJlYcp.png",f="/assets/20231106000237-IDrkAnzg.png",m={},x=r('<p>[toc]</p><h1 id="数据库系统基础" tabindex="-1"><a class="header-anchor" href="#数据库系统基础" aria-hidden="true">#</a> 数据库系统基础</h1><h2 id="数据库系统概述" tabindex="-1"><a class="header-anchor" href="#数据库系统概述" aria-hidden="true">#</a> 数据库系统概述</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><ul><li>什么是信息<br> 信息是对客观事务的一种反映</li><li>什么是数据<br> 数据是对客观事务的一种符号表示，比如说，数字，字母，图像，声音，我都有对应的符号来表示</li><li>什么是数据库<br> 数据库是长期储存在计算机内，有<strong>组织，可共享</strong>的数据集合，不仅包括数据本身，还有数据之间的各种关系</li><li>什么是数据库管理系统 DBMS<br> 数据库管理系统简单理解就是像 Navicat 那样的，可以对数据库进行增删改查，储存数据库，数据表的运行管理等功能的系统<br><img src="'+l+'" alt="" loading="lazy"></li><li>什么是数据库系统 DBS<br> DBS 就是由数据库，数据库管理系统，数据管理员，应用开发人员，数据库设计人员，最终用户，组成的一个完整的数据库环境，就是数据库生态啦<br><img src="'+o+'" alt="" loading="lazy"></li></ul><h3 id="概念模型" tabindex="-1"><a class="header-anchor" href="#概念模型" aria-hidden="true">#</a> 概念模型</h3><p>实体，实体就是现实的实体类，比如说学生，就是个实体<br> 属性，属性就是实体拥有的特征，比如说学生，学生有姓名，年龄，性别，班级等属性<br> 码，码就是实体的唯一标识，比如说学生，学生有学号，学号就是学号的码<br> 实体类型，用实体名和属性名集合来抽象和刻画同类实体，比如说学生，姓名，性别，入学时间等来整合一类实体<br> 联系，实体集的单个实体之间的联系是指不同实体集之间的联系，实体之间的联系有一对一，一对多，多对多，比如说，学生对应学校，课程和学生之间的联系</p><h3 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型" aria-hidden="true">#</a> 数据模型</h3><h4 id="数据模型的组成要素" tabindex="-1"><a class="header-anchor" href="#数据模型的组成要素" aria-hidden="true">#</a> 数据模型的组成要素</h4><p>数据模型的组成要素<br> 静态模型（特性）——数据结构<br> 什么是数据库的数据结构，比如说数据库的组织形式就是数据结构<br> 像关系型数据库，是用表的形式来组织数据的，那么表就是数据结构<br> 动态模型——数据操作，比如说数据的插入，删除，修改<br> 数据的完整性约束，完整性约束条件</p><h4 id="关系数据模型" tabindex="-1"><a class="header-anchor" href="#关系数据模型" aria-hidden="true">#</a> 关系数据模型</h4><h5 id="层次模型" tabindex="-1"><a class="header-anchor" href="#层次模型" aria-hidden="true">#</a> 层次模型</h5><p><img src="'+c+'" alt="" loading="lazy"><br> 层次模型是一种树形结构，数据之间的关系是一对多，比如说，一个学院，学院对应院系，学院对应专业，然后院系又可以对应老师，学生<br> 一对多关系，简单理解，就是一个学校可以对应多个学生，但是一个学生只能是属于一个学校的<br> 但是层次模型在描述非一对多关系时是很难做到的，比如说一个学生可以选很多门课程，一门课程也可以有很多学生，那么在树结构里面，是不能岔开的，所以层次模型不能描述这种情况</p><h5 id="网状模型" tabindex="-1"><a class="header-anchor" href="#网状模型" aria-hidden="true">#</a> 网状模型</h5><p>网状模型可以表示多对多的关系，就像一张网那样，但是数据大起来了以后，就会非常的可怕</p><h4 id="所以主角登场-关系模型" tabindex="-1"><a class="header-anchor" href="#所以主角登场-关系模型" aria-hidden="true">#</a> 所以主角登场，关系模型</h4><ul><li>关系模型的一些概念</li></ul><h1 id="关系数据库" tabindex="-1"><a class="header-anchor" href="#关系数据库" aria-hidden="true">#</a> 关系数据库</h1><h2 id="关系型数据库与非关系型数据库的区别" tabindex="-1"><a class="header-anchor" href="#关系型数据库与非关系型数据库的区别" aria-hidden="true">#</a> 关系型数据库与非关系型数据库的区别</h2><p>关系型数据库是按照二维表的形式来储存数据的<br> 关系型数据库顾名思义，就是数据之间有关系，比如说说，学生表和课程表，这两个数据之间是有关系的，关系可以是一对一，也可以是一对多，比如说，学生表里面的学生和课程表里面的课程，一个学生可以有多门课程，但是一门课程只能有一个学生，这就是一对多的关系<br> 而且在关系型数据库中，数据是以表的形式来表示的，数据之间彼此有关联，比如说，数据域，在表的每一个元组里，数据的格式都是一样的，比如说我的表有学号，姓名，班级，那么我的整个表的每一个元组都是按照这样的格式的<br> 而非关系型数据库的数据是以键值对的形式来储存的，数据之间不一定会有相对应的关系，数据的结构也不一定要按照一样的规范，更加灵活<br> 关系型数据库使用表格（表）来组织和存储数据，其中每个表包含固定数量的列和行。表之间可以建立关系，通过主键和外键来实现数据之间的连接。关系型数据库使用结构化查询语言（SQL）进行数据查询和操作。常见的关系型数据库包括 MySQL、Oracle 和 Microsoft SQL Server 等。</p><p>非关系型数据库则采用不同的数据组织方式，如键值对、文档、列族和图等。非关系型数据库不需要遵循固定的模式，可以更加灵活地存储和处理数据。非关系型数据库通常具有高度可扩展性和性能，适用于大规模数据和分布式系统。常见的非关系型数据库包括 MongoDB、Cassandra 和 Redis 等。</p><h2 id="关系数据库结构即形式化定义" tabindex="-1"><a class="header-anchor" href="#关系数据库结构即形式化定义" aria-hidden="true">#</a> 关系数据库结构即形式化定义</h2><h2 id="关系代数" tabindex="-1"><a class="header-anchor" href="#关系代数" aria-hidden="true">#</a> 关系代数</h2>',23),B={href:"https://blog.csdn.net/qq_45978890/article/details/114139520",target:"_blank",rel:"noopener noreferrer"},y=r('<h2 id="数据库关系计算" tabindex="-1"><a class="header-anchor" href="#数据库关系计算" aria-hidden="true">#</a> 数据库关系计算</h2><ul><li>并</li><li>交</li><li>减</li><li>笛卡尔积</li><li>选择<br> 相当于 select，得到的结果是元组</li><li>投影<br> 直接拿一列</li><li>除</li></ul><h3 id="数据库中的连接" tabindex="-1"><a class="header-anchor" href="#数据库中的连接" aria-hidden="true">#</a> 数据库中的连接</h3><h4 id="自然连接" tabindex="-1"><a class="header-anchor" href="#自然连接" aria-hidden="true">#</a> 自然连接</h4><p>自然连接是关注于列的，只匹配具有相同列的项，怎么看结果呢，一开始先找有没有相同的列，然后列出来，然后再看行，当列里面的项相同时的行再进行匹配<br> 然后按照看笛卡尔积的方式，去看对应的列，如果有相同项的，就并起来<br><img src="'+b+'" alt="" loading="lazy"></p><h4 id="等值连接" tabindex="-1"><a class="header-anchor" href="#等值连接" aria-hidden="true">#</a> 等值连接</h4><p>等值连接就是直接一行一行看，如果有相同的行，就把他们并起来<br><img src="'+p+'" alt="" loading="lazy"></p><h4 id="外连接" tabindex="-1"><a class="header-anchor" href="#外连接" aria-hidden="true">#</a> 外连接</h4><p>外连接就是，自然连接其实是会筛除掉没有匹配的项，但是外连接就不会，会把没有匹配的项也显示出来，然后用 null 来填充<br> 也就是说在自然连接的前提下，看左右表，左表没用上的写上去，然后空的项拿 null 填<br><img src="'+_+'" alt="" loading="lazy"></p><p>也就是说左表+右表</p><h2 id="数据字典" tabindex="-1"><a class="header-anchor" href="#数据字典" aria-hidden="true">#</a> 数据字典</h2><p>数据项；<br> 数据项 === 数据元素 === 数据表里面的目 === 数据表里面的字段 也就是说在一个数据表里面，每一列都是一个数据项<br> 数据项的定义；<br> 比如说在一个学生管理系统里，学生信息的数据项可以包括学号，科目，成绩等等<br> 对应到表里面，就是学号，科目，成绩这些字段<br> 数据结构；<br> 数据结构就是数据项的组织形式，比如说，学生信息的数据项，可以组织成一张表，表里面有学号，科目，成绩这些字段<br> 数据流；<br> 数据流表示在一个系统里面，数据的流向<br> 比如说，用户点击登录，然后输入账号密码，然后点击登录，这个过程中，数据的流向就是从用户输入的账号密码，到数据库里面去验证，然后返回结果，这个过程中，数据的流向就是从用户输入的账号密码，到数据库里面去验证，然后返回结果<br> 数据存储；<br> 数据存储就是数据的储存形式，比如说，数据可以储存在数据库里面，也可以储存在文件里面，也可以储存在内存里面<br><strong>处理过程：</strong><br> 增删改查</p><h2 id="数据库完整性约束" tabindex="-1"><a class="header-anchor" href="#数据库完整性约束" aria-hidden="true">#</a> 数据库完整性约束</h2><h2 id="数据库安全性" tabindex="-1"><a class="header-anchor" href="#数据库安全性" aria-hidden="true">#</a> 数据库安全性</h2><p>数据库安全性等级<br> 从 db2 开始，数据库安全性分为四个等级，分别是 C1，C2，B1，B2，B3，A1，C1 是最低的，目前还没有能达到 a 的数据库系统</p><p>计算机系统的安全等级<br><img src="'+g+'" alt="" loading="lazy"></p><p>有关数据库的安全性，主要包括用户身份鉴别，多层存取控制，审计，数据加密等安全技术</p><p>用户身份鉴别：<br> 用户身份鉴别就是在用户登录的时候，验证用户的身份，比如说，用户输入账号密码，然后点击登录，这个过程中，就是在验证用户的身份，如果账号密码正确，就可以登录，如果账号密码错误，就不能登录</p><p>多层存取控制：<br> 多层存取控制就是在用户登录以后，对用户的权限进行控制，比如说，用户 A 只能查看自己的信息，用户 B 可以查看所有人的信息，这个就是多层存取控制<br> 存取控制，在关系数据库中，用户除了存储数据结构以外，还会储存模式什么的<br><img src="'+u+'" alt="" loading="lazy"><br> 审计<br> 审计就是对用户的操作进行记录，比如说，用户 A 在什么时间，对什么数据进行了什么操作，这个就是审计</p><p>权限授予取消<br> 使用 grant 命令授予用户权限，使用 revoke 命令取消用户权限<br><img src="'+f+'" alt="" loading="lazy"><br> grant to with grant option<br> revoke from</p>',20);function z(k,S){const e=h("ExternalLinkIcon");return t(),n("div",null,[x,a("p",null,[a("a",B,[s("https://blog.csdn.net/qq_45978890/article/details/114139520"),d(e)])]),y])}const q=i(m,[["render",z],["__file","数据库原理.html.vue"]]);export{q as default};
