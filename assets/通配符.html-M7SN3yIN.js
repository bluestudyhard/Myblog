const t=JSON.parse(`{"key":"v-4fec7d1c","path":"/frontend/%E9%80%9A%E9%85%8D%E7%AC%A6.html","title":"","lang":"zh-CN","frontmatter":{"description":"通配符 通配符是文本值中代替未知字符的特殊字符，可方便使用类似但不相同的数据查找多个项目。 通配符也有助于获得基于特定模式匹配的数据。 例如，寻找帕克街上名叫 John 的所有人。 常用通配符 字符 说明 示例 * 匹配任意字符数。 您可以在字符串中使用星号 (*)。 “wh*”将找到 what、white 和 why，但找不到 awhile 或 watch。 ? 在特定位置中匹配单个字母。 “b?ll&nbsp;”可以找到 ball、bell 和 bill。 [ ] 匹配方括号中的字符。 “b[ae]ll”将找到 ball 和 bell，但找不到 bill。 ! 在方括号中排除字符。 “b[!ae]ll”将找到 bill 和 bull，但找不到 ball 或 bell。“Like “[!a]*””将找到不以字母 a 开头的所有项目。 - 匹配一个范围内的字符。 记住以升序指定字符（A 到 Z，而不是 Z 到 A）。 “b[a-c]d”将找到 bad、bbd 和 bcd。 # 匹配任意单个数字字符。 “1#3”将找到 103、113 和 123。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/frontend/%E9%80%9A%E9%85%8D%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"melingkk's blog"}],["meta",{"property":"og:description","content":"通配符 通配符是文本值中代替未知字符的特殊字符，可方便使用类似但不相同的数据查找多个项目。 通配符也有助于获得基于特定模式匹配的数据。 例如，寻找帕克街上名叫 John 的所有人。 常用通配符 字符 说明 示例 * 匹配任意字符数。 您可以在字符串中使用星号 (*)。 “wh*”将找到 what、white 和 why，但找不到 awhile 或 watch。 ? 在特定位置中匹配单个字母。 “b?ll&nbsp;”可以找到 ball、bell 和 bill。 [ ] 匹配方括号中的字符。 “b[ae]ll”将找到 ball 和 bell，但找不到 bill。 ! 在方括号中排除字符。 “b[!ae]ll”将找到 bill 和 bull，但找不到 ball 或 bell。“Like “[!a]*””将找到不以字母 a 开头的所有项目。 - 匹配一个范围内的字符。 记住以升序指定字符（A 到 Z，而不是 Z 到 A）。 “b[a-c]d”将找到 bad、bbd 和 bcd。 # 匹配任意单个数字字符。 “1#3”将找到 103、113 和 123。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-26T15:15:38.000Z"}],["meta",{"property":"article:author","content":"bluestudyhard"}],["meta",{"property":"article:modified_time","content":"2024-02-26T15:15:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-26T15:15:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"bluestudyhard\\",\\"url\\":\\"https://github.com/bluestudyhard?tab=repositories\\"}]}"]]},"headers":[{"level":2,"title":"通配符","slug":"通配符","link":"#通配符","children":[{"level":3,"title":"常用通配符","slug":"常用通配符","link":"#常用通配符","children":[]}]}],"git":{"createdTime":1708960538000,"updatedTime":1708960538000,"contributors":[{"name":"bluestudyhard","email":"3164752596@qq.com","commits":1}]},"readingTime":{"minutes":0.98,"words":294},"filePathRelative":"frontend/通配符.md","localizedDate":"2024年2月26日","excerpt":"<h2> 通配符</h2>\\n<p>通配符是文本值中代替未知字符的特殊字符，可方便使用类似但不相同的数据查找多个项目。 通配符也有助于获得基于特定模式匹配的数据。 例如，寻找帕克街上名叫 John 的所有人。</p>\\n<h3> 常用通配符</h3>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>字符</strong></th>\\n<th><strong>说明</strong></th>\\n<th><strong>示例</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>*</td>\\n<td>匹配任意字符数。 您可以在字符串中使用星号 (<strong>*</strong>)。</td>\\n<td>“<strong>wh*</strong>”将找到 what、white 和 why，但找不到 awhile 或 watch。</td>\\n</tr>\\n<tr>\\n<td>?</td>\\n<td>在特定位置中匹配单个字母。</td>\\n<td>“<strong>b?ll</strong>&nbsp;”可以找到 ball、bell 和 bill。</td>\\n</tr>\\n<tr>\\n<td>[ ]</td>\\n<td>匹配方括号中的字符。</td>\\n<td>“<strong>b[ae]ll</strong>”将找到 ball 和 bell，但找不到 bill。</td>\\n</tr>\\n<tr>\\n<td>!</td>\\n<td>在方括号中排除字符。</td>\\n<td>“<strong>b[!ae]ll</strong>”将找到 bill 和 bull，但找不到 ball 或 bell。<br><br>“<strong>Like “[!a]*”</strong>”将找到不以字母 a 开头的所有项目。</td>\\n</tr>\\n<tr>\\n<td>-</td>\\n<td>匹配一个范围内的字符。 记住以升序指定字符（A 到 Z，而不是 Z 到 A）。</td>\\n<td>“<strong>b[a-c]d</strong>”将找到 bad、bbd 和 bcd。</td>\\n</tr>\\n<tr>\\n<td>#</td>\\n<td>匹配任意单个数字字符。</td>\\n<td>“<strong>1#3</strong>”将找到 103、113 和 123。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{t as data};
