const s=JSON.parse(`{"key":"v-4063465c","path":"/frontend/docker/docker%E9%83%A8%E7%BD%B2springboot_mysql.html","title":"","lang":"zh-CN","frontmatter":{"shortTitle":"docker 部署 springboot+mysql","description":"用 docker 部署 mysql 和 springboot docker init 没带 springboot 玩，所以得自己配置 配置文件 首先在 sb 的根目录下创建 Dockerfile，然后编写一些基础的配置 其实在这里重点关注 jdk 版本，然后工作路径，copy 的名字，可以直接写成 xx.jar 后面是打包后的名字 app.jar 我们常规来说要先打包 jar 才能 compose 那么其实可以在 dockerfile 里面直接写 RUN sh./mvnw package 就可以打包了 # syntax=docker/dockerfile:1 FROM openjdk:17-jdk-alpine as base WORKDIR /app COPY . . RUN sh ./mvnw package -DskipTests FROM openjdk:17-jdk-alpine as prod WORKDIR /app ARG APPNAME=navigations COPY --from=base /app/target/$APPNAME.jar app.jar EXPOSE 8080 ENV JAVA_OPTS=\\"\\\\ -server \\\\ -Xms256m \\\\ -Xmx512m \\\\ -XX:MetaspaceSize=256m \\\\ -XX:MaxMetaspaceSize=512m\\" ENV PARAMS=\\"\\" ENTRYPOINT [\\"sh\\",\\"-c\\",\\"java -jar $JAVA_OPTS app.jar $PARAMS\\"]","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/frontend/docker/docker%E9%83%A8%E7%BD%B2springboot_mysql.html"}],["meta",{"property":"og:site_name","content":"melingkk's blog"}],["meta",{"property":"og:description","content":"用 docker 部署 mysql 和 springboot docker init 没带 springboot 玩，所以得自己配置 配置文件 首先在 sb 的根目录下创建 Dockerfile，然后编写一些基础的配置 其实在这里重点关注 jdk 版本，然后工作路径，copy 的名字，可以直接写成 xx.jar 后面是打包后的名字 app.jar 我们常规来说要先打包 jar 才能 compose 那么其实可以在 dockerfile 里面直接写 RUN sh./mvnw package 就可以打包了 # syntax=docker/dockerfile:1 FROM openjdk:17-jdk-alpine as base WORKDIR /app COPY . . RUN sh ./mvnw package -DskipTests FROM openjdk:17-jdk-alpine as prod WORKDIR /app ARG APPNAME=navigations COPY --from=base /app/target/$APPNAME.jar app.jar EXPOSE 8080 ENV JAVA_OPTS=\\"\\\\ -server \\\\ -Xms256m \\\\ -Xmx512m \\\\ -XX:MetaspaceSize=256m \\\\ -XX:MaxMetaspaceSize=512m\\" ENV PARAMS=\\"\\" ENTRYPOINT [\\"sh\\",\\"-c\\",\\"java -jar $JAVA_OPTS app.jar $PARAMS\\"]"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-26T15:15:38.000Z"}],["meta",{"property":"article:author","content":"bluestudyhard"}],["meta",{"property":"article:modified_time","content":"2024-02-26T15:15:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-26T15:15:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"bluestudyhard\\",\\"url\\":\\"https://github.com/bluestudyhard?tab=repositories\\"}]}"]]},"headers":[{"level":2,"title":"用 docker 部署 mysql 和 springboot","slug":"用-docker-部署-mysql-和-springboot","link":"#用-docker-部署-mysql-和-springboot","children":[{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":3,"title":"最为关键的 docker-compose.yml","slug":"最为关键的-docker-compose-yml","link":"#最为关键的-docker-compose-yml","children":[]}]}],"git":{"createdTime":1708960538000,"updatedTime":1708960538000,"contributors":[{"name":"bluestudyhard","email":"3164752596@qq.com","commits":1}]},"readingTime":{"minutes":2.15,"words":644},"filePathRelative":"frontend/docker/docker部署springboot+mysql.md","localizedDate":"2024年2月26日","excerpt":"<h2> 用 docker 部署 mysql 和 springboot</h2>\\n<p>docker init 没带 springboot 玩，所以得自己配置</p>\\n<h3> 配置文件</h3>\\n<p>首先在 sb 的根目录下创建 Dockerfile，然后编写一些基础的配置<br>\\n其实在这里重点关注 jdk 版本，然后工作路径，copy 的名字，可以直接写成 xx.jar 后面是打包后的名字 app.jar<br>\\n我们常规来说要先打包 jar 才能 compose 那么其实可以在 dockerfile 里面直接写 RUN sh./mvnw package 就可以打包了</p>\\n<div class=\\"language-docker line-numbers-mode\\" data-ext=\\"docker\\"><pre class=\\"language-docker\\"><code><span class=\\"token comment\\"># syntax=docker/dockerfile:1</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">FROM</span> openjdk:17-jdk-alpine <span class=\\"token keyword\\">as</span> base</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">WORKDIR</span> /app</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">COPY</span> . .</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">RUN</span> sh ./mvnw package -DskipTests</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">FROM</span> openjdk:17-jdk-alpine <span class=\\"token keyword\\">as</span> prod</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">WORKDIR</span> /app</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ARG</span> APPNAME=navigations</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">COPY</span> <span class=\\"token options\\"><span class=\\"token property\\">--from</span><span class=\\"token punctuation\\">=</span><span class=\\"token string\\">base</span></span> /app/target/<span class=\\"token variable\\">$APPNAME</span>.jar app.jar</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">EXPOSE</span> 8080</span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ENV</span> JAVA_OPTS=<span class=\\"token string\\">\\"\\\\\\n  -server \\\\\\n  -Xms256m \\\\\\n  -Xmx512m \\\\\\n  -XX:MetaspaceSize=256m \\\\\\n  -XX:MaxMetaspaceSize=512m\\"</span></span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ENV</span> PARAMS=<span class=\\"token string\\">\\"\\"</span></span>\\n\\n<span class=\\"token instruction\\"><span class=\\"token keyword\\">ENTRYPOINT</span> [<span class=\\"token string\\">\\"sh\\"</span>,<span class=\\"token string\\">\\"-c\\"</span>,<span class=\\"token string\\">\\"java -jar $JAVA_OPTS app.jar $PARAMS\\"</span>]</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{s as data};
