import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,b as s,d as n,e,f as t}from"./app-xEYoAD2G.js";const r="/assets/20230912234530-6rCpmXnX.png",i="/assets/20230912234540-SJwdbnUg.png",u="/assets/20230916002109-DyIDcrhF.png",d={},k=s("h1",{id:"记录一些用过的-常用的-vueuse-函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#记录一些用过的-常用的-vueuse-函数","aria-hidden":"true"},"#"),n(" 记录一些用过的/常用的 vueUse 函数")],-1),v=s("h2",{id:"首先当然是安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#首先当然是安装","aria-hidden":"true"},"#"),n(" 首先当然是安装")],-1),m={href:"https://vueuse.org/",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i @vueuse/core
<span class="token function">pnpm</span> i @vueuse/integrations
// nuxt
<span class="token function">npm</span> i <span class="token parameter variable">-D</span> @vueuse/nuxt @vueuse/core


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Nuxt <span class="token number">3</span>
<span class="token comment">// nuxt.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;@vueuse/nuxt&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
Nuxt <span class="token number">2</span>
<span class="token comment">// nuxt.config.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">buildModules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;@vueuse/nuxt&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
And then use VueUse <span class="token keyword">function</span> anywhere <span class="token keyword">in</span> your Nuxt app<span class="token punctuation">.</span> For example<span class="token operator">:</span>

html
<span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>pos<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="integrations" tabindex="-1"><a class="header-anchor" href="#integrations" aria-hidden="true">#</a> @Integrations</h2><h3 id="useasyncvalidator" tabindex="-1"><a class="header-anchor" href="#useasyncvalidator" aria-hidden="true">#</a> useAsyncValidator</h3>`,4),b=s("br",null,null,-1),h={href:"https://vueuse.org/integrations/useAsyncValidator/",target:"_blank",rel:"noopener noreferrer"},q=t(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Rules <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;async-validator&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useAsyncValidator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vueuse/integrations/useAsyncValidator&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rules<span class="token operator">:</span> Rules <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&quot;Please input name&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> min<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&quot;Length should be 3 to 5&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&quot;Please input password&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> min<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&quot;Length should be 12&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> pattern<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&quot;Upper letter&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> pattern<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&quot;Number&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> pattern<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\w\\s]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&quot;Symobl&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;form.name&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;username&quot;</span>
                <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;{ &#39;border-red&#39;: errorFields?.name?.length }&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;errorFields?.name?.length&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;border-red&quot;</span><span class="token operator">&gt;</span>
                <span class="token punctuation">{</span><span class="token punctuation">{</span> errorFields<span class="token punctuation">.</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;form.password&quot;</span> placeholder<span class="token operator">=</span><span class="token string">&quot;input password&quot;</span>
                <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;{ &#39;border-red&#39;: errorFields?.password?.length }&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;errorFields?.password?.length&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;border-red&quot;</span><span class="token operator">&gt;</span>
                <span class="token punctuation">{</span><span class="token punctuation">{</span> errorFields<span class="token punctuation">.</span>password<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>span <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;pass ? &#39;correct&#39; : &#39;&#39;&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> pass <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这玩意的使用原理，举一个里面为什么用 length 来判断的例子，其实这玩意有点像一个队列，如果输入框满足了条件，就自动 pop 掉了,看 console 就明白了</p><p><img src="`+r+'" alt="" loading="lazy"><br><img src="'+i+'" alt="" loading="lazy"></p><p><strong>注意</strong><br><img src="'+u+`" alt="" loading="lazy"><br> 这玩意要套在 v-if 里面用才行，如果要这样显示 message 的话，不然会报错 undefined</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>login.vue:124  Uncaught <span class="token punctuation">(</span>in promise<span class="token punctuation">)</span> TypeError: Cannot <span class="token builtin class-name">read</span> properties of undefined <span class="token punctuation">(</span>reading <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
    at Proxy._sfc_render <span class="token punctuation">(</span>login.vue:124:31<span class="token punctuation">)</span>
    at renderComponentRoot <span class="token punctuation">(</span>runtime-core.esm-bundler.js:816:16<span class="token punctuation">)</span>
    at ReactiveEffect.componentUpdateFn <span class="token punctuation">[</span>as fn<span class="token punctuation">]</span> <span class="token punctuation">(</span>runtime-core.esm-bundler.js:5764:26<span class="token punctuation">)</span>
    at ReactiveEffect.run <span class="token punctuation">(</span>reactivity.esm-bundler.js:178:19<span class="token punctuation">)</span>
    at instance.update <span class="token punctuation">(</span>runtime-core.esm-bundler.js:5814:51<span class="token punctuation">)</span>
    at callWithErrorHandling <span class="token punctuation">(</span>runtime-core.esm-bundler.js:158:32<span class="token punctuation">)</span>
    at flushJobs <span class="token punctuation">(</span>runtime-core.esm-bundler.js:357:9<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function y(f,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[k,v,s("p",null,[s("a",m,[n("用英文版的文档才是最新的"),e(a)])]),g,s("p",null,[n("用于表单的检验。。但是做不出我要的效果"),b,s("a",h,[n("https://vueuse.org/integrations/useAsyncValidator/"),e(a)])]),q])}const j=p(d,[["render",y],["__file","vueUse.html.vue"]]);export{j as default};
